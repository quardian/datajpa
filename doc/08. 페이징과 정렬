┌──────────────────────────────────────────────────────────────────────┐
│ 페이징과 정렬                                                          │
┕──────────────────────────────────────────────────────────────────────┙

┌──────────────────────────────────────────────────────────────────────┐
│                                                                      │
    1. 순수 JPA 페이징과 정렬

        - 다음 조건 가정
            . 검색 조건     : 나이 10살
            . 정렬 조건     : 이름 (내림차순)
            . 페이징 조건    : 1 페이지, 페이지당 3 건

        - JPA 페이징 리포지토리 코드
          ─────────────────────────────────────────────────────────────────
            public List<Member> findByPage(int age, int offset, int limit){
                String qlString = "select m from Member m where m.age = :age " +
                                  " order by m.username desc ";
                return em.createQuery(qlString, Member.class)
                        .setParameter("age", age)
                        .setFirstResult(offset)
                        .setMaxResults(limit)
                        .getResultList();
            }

            public long totalCount(int age){
                String qlString = "select count(m) from Member m where m.age = :age ";
                        return em.createQuery(qlString, Long.class)
                                .setParameter("age", age)
                                .getSingleResult();
            }
          ─────────────────────────────────────────────────────────────────

    2. Spring Data JPA 페이징과 정렬

        1) 페이징과 정렬 파라미터
            - org.springframework.data.domain.Sort      : 정렬 기능
            - org.springframework.data.domain.Pageable  : 페이징 기능 ( 내부에 Sort 포함 )

        2) 특별한 반환 타입
            - org.springframework.data.domain.Page      : 추가 count 쿼리 결과를 포함하는 페이징
            - org.springframework.data.domain.Slice     : 추가 count 쿼리 없이 다음 페이지만 확인 가능 ( 내부적으로 limit + 1 조회 )
            - List (자바 컬렉션)                          : 추가 count 쿼리 없이 결과만 반환

        ** 페이징과 정렬 사용 예제

            Page<Member> findByUsername(String name, Pageable pageable);    // count 쿼리 사용

            Slice<Member> findByUsername(String name, Pageable pageable);    // count 쿼리 사용 안함

            List<Member> findByUsername(String name, Pageable pageable);    // count 쿼리 사용 안함

            List<Member> findByUsername(String name, Sort sort);

            //------------------------------------------
            // Spring Data JPA 는 페이지를 0번 부터 시작함
                Sort.Order usernameDesc = Sort.Order.desc("username");
                Sort.Order idAsc = Sort.Order.asc("id");

                PageRequest pageable = PageRequest.of((requestPage-1), limit,  Sort.by(usernameDesc, idAsc));

                Page<Member> page    = memberRepository.findPageByAge(age, pageable);

                long totalElements      = page.getTotalElements();
                List<Member> members    = page.getContent();
                int totalPages          = page.getTotalPages();
                int number              = page.getNumber() + 1;
                boolean isFirst         = page.isFirst();
                boolean isLast          = page.isLast();
                boolean hasNext         = page.hasNext();



│                                                                      │
┕──────────────────────────────────────────────────────────────────────┙
