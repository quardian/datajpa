┌──────────────────────────────────────────────────────────────────────┐
│ @EntityGraph                                                         │
┕──────────────────────────────────────────────────────────────────────┙

┌──────────────────────────────────────────────────────────────────────┐
│                                                                      │
    1. EntityGraph
        - 연관된 Entity 들을 한 번의 SQL로 조회하는 방법

        - member --> team은 지연로딩 관계이다.
          따라서 다음과 같이 team의 데이터를 조회할 때 마다 쿼리가 실행된다.
          (N + 1 문제 발생 )

        @Test
        public void findMemberLazy() throws Exception
        {
            Team teamA = new Team("teamA");
            Team teamB = new Team("teamB");

            teamRepository.save(teamA);
            teamRepository.save(teamB);

            memberRepository.save( new Member("member1", 10, teamA ));
            memberRepository.save( new Member("member2", 20, teamB ));

            em.flush();
            em.clear();

            List<Member> members = memberRepository.findAll();

            for (Member member : members){
                member.getUsername();
            }

        }


    2. [MemberRepository.java]
        // [10] fetch join with JPA
            @Query( "select m from Member m inner join fetch m.team ")
            List<Member> findFetchAll();

        // [11] fetch join with EntityGraph supported Spring DATA Jpa
        // left join 만 지원함. inner join 필요시 JPA를 사용해야 함.
            @EntityGraph(attributePaths = {"team"} )
            List<Member> findFetchById(Long id);

    3. NamedEntityGraph

        [Member.java]
            @NamedEntityGraph(name="Member.all", attributeNodes = {@NamedAttributeNode("team")} )
            public class Member{..}

        [MemberRepository.java]
            @EntityGraph( value="Member.all" )
            List<Member> findFetchById(Long id);

    *** EntityGraph는 LEFT JOIN 상황 이고, 간단한 상황인 경우만 쓰고
        복잡한 상황에서는 될 수 있으면 JPQL을 상용한다.
│                                                                      │
┕──────────────────────────────────────────────────────────────────────┙
