
┌──────────────────────────────────────────────────────────────────────┐
│ Auditing                                                             │
┕──────────────────────────────────────────────────────────────────────┙

┌──────────────────────────────────────────────────────────────────────┐
│                                                                      │
    1. Auditing

        - 엔티티를 생성, 변경할 때 변경한 사람과 시간을 추적하고 싶다면?
            . 등록일, 수정일
            . 등록자, 수정자

        - JPA 인터티 사이클 콜백 어노테이션
            . @PrePersist   : 새로운 entity에 대해 persist 호출 전에
            . @PostPersist  : 새로운 entity에 대해 persist 호출 후에
            . @PreRemove    : entity가 삭제되기 전
            . @PostRemove   : entity가 삭제된 후
            . @PreUpdate    : update 연산 전
            . @PostUpdate   : update 연산 후
            . @PostLoad     : entity가 로드된 후

        1) 순수 JPA 사용
            . 우선 등록일, 수정일 적용

            [java]
                @MappedSuperclass
                @Getter
                public class JpaBaseEntity
                {
                    @Column(updatable = false)
                    private LocalDateTime createdAt;

                    private LocalDateTime updatedAt;

                    /**
                     * JPA가 PrePersist 이벤트 제공 : Persist 하기 전 이벤트 발생
                     */
                    @PrePersist
                    public void prePersist()
                    {
                        LocalDateTime now = LocalDateTime.now();
                        createdAt = now;
                        updatedAt = now;
                    }

                    /**
                     * JPA가 업데이트 하기 전 이벤트 제공
                     */
                    @PreUpdate
                    public void preUpdate()
                    {
                        LocalDateTime now = LocalDateTime.now();
                        updatedAt = now;
                    }
                }

        2. Spring DATA JPA 사용

            *설정*
            @EnableJpaAuditing  --> 스프링 부트 설정 클래스에 적용해야함.
            @EntityListeners(AuditingEntityListener.class)  --> 엔티티에 적용

            *사용 어노테이션*
            - @CreatedDate
            - @LastModifyedDate
            - @CreatedBy
            - @LastModifiedBy

            *예제*
            @EntityListeners(AuditingEntityListener.class)
            @MappedSuperclass
            @Getter
            public abstract class BaseEntity
            {
                @CreatedDate
                @Column(updatable = false)
                private LocalDateTime createdAt;

                @LastModifiedDate
                private LocalDateTime updatedAt;

                @CreatedBy
                @Column(updatable = false)
                private String createdBy;

                @LastModifiedBy
                private String updatedBy;
            }

            [Java Config ]
            @Configuration
            @EnableJpaAuditing
            // Springboot 에서는 아래 설정 안해도, Application 하위에서 알아서 찾아줌.
            @EnableJpaRepositories(basePackages = {"com.inho.datajpa.repository"})
            public class SpringDataJpaConfig
            {
                @Bean
                public AuditorAware<String> auditorProvider()
                {
                    // 실제는 : 세션정보에서 ID 를 갖어와서 반환
                    return () -> Optional.of( UUID.randomUUID().toString() );
                }
            }

            [META-INF/orm.xml]
            - @EntityListeners(AuditingEntityListener.class)를 생략 후
              스프링 데이터 JPA가 제공하는 이벤트를 인티티 전체 적용하려면 orm.xml 다음과 같이 등록

              <?xml version="1.0" encoding="UTF-8">
              <entity-mappings xmlns="..." ...>
                    <persistence-unit-metadata>
                        <persistence-unit-defaults>
                            <entity-listener
                                class="org.springframework.data.jpa.domain.support.AuditingEntityListenr" />
                        </entity-listener>
                        </persistence-unit-defaults>
                    </persistence-unit-metadata>
              </entity-mappings>


│                                                                      │
┕──────────────────────────────────────────────────────────────────────┙
