
┌──────────────────────────────────────────────────────────────────────┐
│ Spring DATA JPA 분석                                                  │
┕──────────────────────────────────────────────────────────────────────┙

┌──────────────────────────────────────────────────────────────────────┐
│                                                                      │
    ────────────────────────────────────────────────────────────────────
    Spring DATA JPA 구현체 분석
    ────────────────────────────────────────────────────────────────────
    1. 스프링 데이터 JPA가 제공하는 공통 인터페이스의 구현체
        - org.springframework.data.jpa.repository.support.SimpleJpaRepository

        ** SimpleJpaRepository
            @Repository
            @Transactional(readOnly = true)
            public class SimpleJpaRepository<T,ID> ...{
                @Transactional
                public <S extends T> S save (S entity){
                    if ( entityInformation.isNew(entity) ){
                        em.persist(entity);
                        return entity;
                    }
                    else {
                        return em.merge(entity);
                    }
                }
            }

        - @Repository 적용 : JPA 예외를 스프링이 추상화한 예외로 변환
        - @Transactional 적용
            . JPA의 모든 변경이 트랜잭션 안에서 동작
            . 스프링 데이터 JPA는 변경(등록,수정,삭제) 메소드를 트랜잭션 처리
            . 서비스 계층에서 트랜잭션을 시작하지 않으면 리파지토리에서 트랜잭션 시작
            . 서비스 게층에서 트랜잭션을 시작하면 리파지토리는 해당 트랜잭션을 전파 받아서 사용
            . 그래서 스프링 데이터 JPA를 사용할 때 트랜잭션이 없어도 데이터 등록, 변겨이 가능했음.
              (사실은 트랜잭션이 리포지토리 계층에 걸려있는 것임)

        - @Transactional(readOnly = true)
            . 데이터 단순히 조회만 하고 변경하지 않는 트랜잭션에서 readOnly = true 옵션을 사용하면
              플러시를 생략해서 약간의 성능 향상을 얻을 수 있음

        ** 매우 중요!!!**
            . 새로운 엔터티면 저장(persist)
            . 새로운 엔터티가 아니면 병합(merge)
              - 될 수 있으면 merge 사용하면 안된다. (select 쿼리가 한번 나감)
                따라서 수정은 변경 감지를 통해 수정함.
              - merge는 영속성 상태에서 detached 되었다가 다시 attached 되었을 때 사용

    ────────────────────────────────────────────────────────────────────
    새로운 인티티를 구별하는 방법
    ────────────────────────────────────────────────────────────────────
        - 식별자가 객체일 때 null 로 판단
        - 식별자가 자바 기본 타입일 때 0 으로 판단
        - Persistable 인터페이스 구현해서 판단 로직 변경 가능

        ** Persistable **
        public interface Persistable<ID>{
            ID getId();
            boolean isNew();
        }

        참고: JPA 식별자 생성 전략이 @GenerateValue 면 save() 호출 시점에 식별자가 없으므로
            새로운 인티티로 인식해서 정상 동작한다.

            그런데 JPA 식별자 생성 전략이 @Id만 사용해서 직접 할당이면
            이미 식별자 값이 있는 상태로 save()를 호출한다.
            이 경우 merge()가 호출된다.

            merge()는 우선 DB를 호출해서 값을 확인하고, DB에서 값이 없으면
            새로운 엔티티로 인지하므로 매우 비효율 적이다.
            따라서 Persistable를 사용해서 새로운 엔티티 확인 여부를 직접 구현하는게 효과적이다.

            참고로 등록시간 @CreatedDate를 조합해서 사용하면 이 필드가 새로운 엔티티 여부를
            편리하게 확인할 수 있다. (@CreatedDate에 값이 없으면 새로운 엔티티로 판단)


        예제)
            @Getter @Setter
            @EntityListeners(AuditingEntityListener.class)
            @Entity
            public class Item implements Persistable<String>
            {
                @Id
                private String id;

                @CreatedDate
                private LocalDateTime createdAt;


                @Override
                public String getId() {
                    return id;
                }

                @Override
                public boolean isNew() {
                    return createdAt == null;
                }

                public Item() {
                }

                public Item(String id) {
                    this.id = id;
                }
            }


│                                                                      │
┕──────────────────────────────────────────────────────────────────────┙
